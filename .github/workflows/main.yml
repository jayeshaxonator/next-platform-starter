name: Update Documentation with Claude Code

on:
  issues:
    types: [opened, labeled]

jobs:
  update-documentation:
    # Only run if the issue has the 'documentation' label
    if: contains(github.event.issue.labels.*.name, 'documentation')
    runs-on: ubuntu-latest
    
    permissions:
      contents: write
      issues: write
      pull-requests: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      
      - name: Install Claude Code
        run: |
          # Install Claude Code globally
          npm install -g claude
          # Verify installation
          claude --version
      
      - name: Create docs directory if it doesn't exist
        run: |
          mkdir -p docs
      
      - name: Extract issue information
        id: issue_info
        run: |
          # Extract issue details
          echo "ISSUE_TITLE=${{ github.event.issue.title }}" >> $GITHUB_ENV
          echo "ISSUE_BODY<<EOF" >> $GITHUB_ENV
          echo "${{ github.event.issue.body }}" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
          echo "ISSUE_NUMBER=${{ github.event.issue.number }}" >> $GITHUB_ENV
          echo "ISSUE_URL=${{ github.event.issue.html_url }}" >> $GITHUB_ENV
      
      - name: Generate documentation with Claude Code
        run: |
          # Create a context file with existing docs and issue info
          cat > context.txt << 'EOF'
          # Documentation Update Request
          
          **Issue Title:** ${{ env.ISSUE_TITLE }}
          **Issue Number:** #${{ env.ISSUE_NUMBER }}
          **Issue URL:** ${{ env.ISSUE_URL }}
          
          **Issue Description:**
          ${{ env.ISSUE_BODY }}
          
          ## Current Documentation Structure
          Here are the existing files in the /docs directory:
          
          $(find docs -name "*.md" -type f 2>/dev/null | head -20 || echo "No existing documentation files found")
          
          ## Existing Documentation Content:
          $(for file in $(find docs -name "*.md" -type f 2>/dev/null | head -5); do
            echo "### File: $file"
            echo '```markdown'
            cat "$file" 2>/dev/null || echo "Could not read file"
            echo '```'
            echo ""
          done)
          EOF
          
          # Use Claude to analyze and generate documentation updates
          DOCUMENTATION_UPDATES=$(cat context.txt | claude -p 'Based on this documentation request, analyze what documentation needs to be created or updated. Output a JSON object with the following structure:
          {
            "files_to_update": [
              {
                "filename": "docs/filename.md",
                "action": "create" or "update",
                "content": "full markdown content of the file"
              }
            ],
            "summary": "brief summary of changes made"
          }
          
          Rules:
          1. If updating existing documentation, include the complete updated content
          2. If creating new documentation, use appropriate filenames
          3. Include proper markdown formatting with headings, examples, and clear explanations
          4. Add a reference to issue #${{ env.ISSUE_NUMBER }} at the bottom of each file
          5. Follow standard documentation structure (title, overview, details, examples, etc.)
          6. Output valid JSON only, no other text' --output-format text)
          
          # Save the JSON response
          echo "$DOCUMENTATION_UPDATES" > updates.json
          
          # Process the updates using jq
          if command -v jq >/dev/null 2>&1; then
            # Extract and apply each file update
            jq -r '.files_to_update[] | @base64' updates.json | while read -r file_data; do
              FILENAME=$(echo "$file_data" | base64 -d | jq -r '.filename')
              ACTION=$(echo "$file_data" | base64 -d | jq -r '.action')
              CONTENT=$(echo "$file_data" | base64 -d | jq -r '.content')
              
              # Create directory if needed
              mkdir -p "$(dirname "$FILENAME")"
              
              # Write the content to the file
              echo "$CONTENT" > "$FILENAME"
              echo "Processed: $FILENAME ($ACTION)"
            done
            
            # Save summary for later use
            jq -r '.summary' updates.json > summary.txt
          else
            echo "Error: jq is required for JSON processing"
            exit 1
          fi
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
      
      - name: Check for changes
        id: git_status
        run: |
          git add docs/
          if git diff --staged --quiet; then
            echo "has_changes=false" >> $GITHUB_OUTPUT
            echo "No documentation changes detected"
          else
            echo "has_changes=true" >> $GITHUB_OUTPUT
            echo "Documentation changes detected"
            git status --porcelain docs/
          fi
      
      - name: Commit and push changes
        if: steps.git_status.outputs.has_changes == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Get list of changed files for commit message
          CHANGED_FILES=$(git diff --staged --name-only docs/ | tr '\n' ' ')
          
          # Get summary if available
          SUMMARY=""
          if [ -f summary.txt ]; then
            SUMMARY=$(cat summary.txt)
          fi
          
          git commit -m "docs: Update documentation for issue #${{ env.ISSUE_NUMBER }}

          $SUMMARY
          
          - Updated/created documentation files: $CHANGED_FILES
          - Addresses issue: ${{ env.ISSUE_TITLE }}
          - Issue URL: ${{ env.ISSUE_URL }}
          
          Co-authored-by: Claude <claude@anthropic.com>"
          
          git push
      
      - name: Create pull request (alternative approach)
        if: steps.git_status.outputs.has_changes == 'true' && github.event_name == 'issues'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Alternative: Create a PR instead of direct push
          # Uncomment this section if you prefer PR workflow
          
          # BRANCH_NAME="docs/issue-${{ env.ISSUE_NUMBER }}-$(date +%s)"
          # git checkout -b "$BRANCH_NAME"
          # git push origin "$BRANCH_NAME"
          # 
          # gh pr create \
          #   --title "docs: Update documentation for issue #${{ env.ISSUE_NUMBER }}" \
          #   --body "This PR addresses the documentation request in issue #${{ env.ISSUE_NUMBER }}.
          # 
          # **Issue:** ${{ env.ISSUE_TITLE }}
          # **Changes:** Updated/created documentation based on the issue requirements.
          # 
          # Closes #${{ env.ISSUE_NUMBER }}" \
          #   --head "$BRANCH_NAME" \
          #   --base main
          
          echo "Direct push completed. Uncomment PR section if you prefer pull request workflow."
      
      - name: Comment on issue
        if: steps.git_status.outputs.has_changes == 'true'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Get summary if available
          SUMMARY_TEXT=""
          if [ -f summary.txt ]; then
            SUMMARY_TEXT="**Summary of changes:**
          $(cat summary.txt)
          
          "
          fi
          
          gh issue comment ${{ env.ISSUE_NUMBER }} --body "✅ Documentation has been updated automatically!

          The documentation in the \`/docs\` folder has been updated based on your request. 

          $SUMMARY_TEXT**Files changed:**
          $(git log -1 --name-only --pretty=format:"" docs/ | grep -E '\.md$' | sed 's/^/- /')

          You can view the changes in the latest commit: ${{ github.sha }}

          If you need any adjustments to the documentation, please let us know by commenting on this issue."
      
      - name: Handle no changes
        if: steps.git_status.outputs.has_changes == 'false'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh issue comment ${{ env.ISSUE_NUMBER }} --body "ℹ️ No documentation changes were generated.

          Claude analyzed your request but determined that no changes to the existing documentation were needed, or the request may need clarification.

          Please review your request and ensure it contains:
          - Clear description of what documentation is needed
          - Specific topics or features to document
          - Any examples or details that should be included

          You can add more details to this issue or create a new one with more specific requirements."
      
      - name: Add documentation label
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Add a label to track processed documentation issues
          gh issue edit ${{ env.ISSUE_NUMBER }} --add-label "documentation-processed"
      
      - name: Install jq if not present
        run: |
          if ! command -v jq >/dev/null 2>&1; then
            sudo apt-get update && sudo apt-get install -y jq
          fi
